module Jenkins2
	class Client
		module CredentialCommands
			BOUNDARY = '----Jenkins2RubyMultipartClient' + rand(1000000).to_s

			# Creates credentials based on provided arguments. Calls either:
			# - +create_credential_username_password+
			# - +create_credential_ssh+
			# - +create_credential_secret_text+
			# - +create_credential_secret_file+
			# See those functions' documentation for the exact parameters required
			def create_credential( **args )
				return create_credential_username_password( args ) if args[:password]
				return create_credential_ssh( args ) if args[:private_key]
				return create_credential_secret_text( args ) if args[:secret]
				return create_credential_secret_file( args ) if args[:content]
			end

			# Creates username and password credential. Accepts hash with the following parameters.
			# +scope+:: Scope of the credential. GLOBAL or SYSTEM
			# +id+:: Id of the credential. Will be Generated by Jenkins, if not provided.
			# +description+:: Human readable text, what this credential is used for.
			# +username+:: Username.
			# +password+:: Password in plain text.
			def create_credential_username_password( **args )
				json_body = { "" => "0",
					credentials: args.merge(
						'$class' => 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl'
					)
				}.to_json
				api_request( :post, '/credentials/store/system/domain/_/createCredentials' ) do |req|
					req.body = "json=#{CGI::escape json_body}"
					req.content_type = 'application/x-www-form-urlencoded'
				end
			end

			# Creates ssh username with private key credential. Jenkins must have ssh-credentials plugin
			# installed, to use this functionality. Accepts hash with the following parameters.
			# +scope+:: Scope of the credential. GLOBAL or SYSTEM
			# +id+:: Id of the credential. Will be Generated by Jenkins, if not provided.
			# +description+:: Human readable text, what this credential is used for.
			# +username+:: Ssh username.
			# +private_key+:: Ssh private key, with new lines replaced by <tt>\n</tt> sequence.
			# +passphrase+:: Passphrase for the private key. Empty string, if not provided.
			def create_credential_ssh( **args )
				json_body = { "" => "1",
					credentials: {
						scope: args[:scope],
						username: args[:username],
						privateKeySource: {
							value: "0",
							privateKey: args[:private_key],
							'stapler-class' => 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource'
						},
						passphrase: args[:passphrase],
						id: args[:id],
						description: args[:description],
						'$class' => 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey'
					}
				}.to_json
				api_request( :post, '/credentials/store/system/domain/_/createCredentials' ) do |req|
					req.body = "json=#{CGI::escape json_body}"
					req.content_type = 'application/x-www-form-urlencoded'
				end
			end
			
			# Creates a secret text credential. Jenkins must have plain-credentials plugin
			# installed, to use this functionality. Accepts hash with the following parameters.
			# +scope+:: Scope of the credential. GLOBAL or SYSTEM
			# +id+:: Id of the credential. Will be Generated by Jenkins, if not provided.
			# +description+:: Human readable text, what this credential is used for.
			# +secret+:: Some secret text.
			def create_credential_secret_text( **args )
				json_body = { "" => "3",
					credentials: args.merge(
						'$class' => 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl'
					)
				}.to_json
				api_request( :post, '/credentials/store/system/domain/_/createCredentials' ) do |req|
					req.body = "json=#{CGI::escape json_body}"
					req.content_type = 'application/x-www-form-urlencoded'
				end
			end

			# Creates a secret file credential. Jenkins must have plain-credentials plugin
			# installed, to use this functionality. Accepts hash with the following parameters.
			# +scope+:: Scope of the credential. GLOBAL or SYSTEM
			# +id+:: Id of the credential. Will be Generated by Jenkins, if not provided.
			# +description+:: Human readable text, what this credential is used for.
			# +filename+:: Name of the file.
			# +content+:: File content.
			def create_credential_secret_file( **args )
				filename = args.delete :filename
				content = args.delete :content
				body = "--#{BOUNDARY}\r\n"
				body << "Content-Disposition: form-data; name=\"file0\"; filename=\"#{filename}\"\r\n"
				body << "Content-Type: application/octet-stream\r\n\r\n"
				body << content
				body << "\r\n"
				body << "--#{BOUNDARY}\r\n"
				body << "Content-Disposition: form-data; name=\"json\"\r\n\r\n"
				body << { "" => "2",
					credentials: args.merge(
						'$class' => 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl',
						'file' => 'file0'
					)
				}.to_json
				body << "\r\n\r\n--#{BOUNDARY}--\r\n"
				api_request( :post, '/credentials/store/system/domain/_/createCredentials' ) do |req|
					req.add_field 'Content-Type', "multipart/form-data, boundary=#{BOUNDARY}"
					req.body = body
				end
			end

			# Deletes credential
			# +id+:: Credential's id
			def delete_credential( id )
				api_request( :post, "/credentials/store/system/domain/_/credential/#{id}/doDelete" ) do |req|
					req.content_type = 'application/x-www-form-urlencoded'
				end
			end

			# Returns credential as json. Raises Net::HTTPNotFound, if no such credential
			# +id+:: Credential's id
			def get_credential( id )
				api_request( :get, "/credentials/store/system/domain/_/credential/#{id}/api/json" )
			end

			# Lists all credentials
			def list_credentials( store: 'system', domain: '_' )
				api_request( :get, "/credentials/store/#{store}/domain/#{domain}/api/json?depth=1" )['credentials']
			end
		end
	end
end
